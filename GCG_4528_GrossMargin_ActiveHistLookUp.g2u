Program.Sub.ScreenSU.Start
Gui.Form..Create
Gui.Form..Caption("Select date range")
Gui.Form..Size(4890,4110)
Gui.Form..MinX(0)
Gui.Form..MinY(0)
Gui.Form..Position(0,0)
Gui.Form..BackColor(-2147483633)
Gui.Form..MousePointer(0)
Gui.Form..Event(UnLoad,Form_UnLoad)
Gui.Form.dtpBegDate.Create(DatePicker)
Gui.Form.dtpBegDate.Size(1935,285)
Gui.Form.dtpBegDate.Position(270,585)
Gui.Form.cmdSelect.Create(Button)
Gui.Form.cmdSelect.Size(855,375)
Gui.Form.cmdSelect.Position(270,3210)
Gui.Form.cmdSelect.Caption("Select")
Gui.Form.cmdSelect.Event(Click,cmdSelect_Click)
Gui.Form.dtpEndDate.Create(DatePicker)
Gui.Form.dtpEndDate.Size(1935,285)
Gui.Form.dtpEndDate.Position(2370,585)
Gui.Form.lbl1.Create(Label,"Sales date range",True,1935,255,0,270,330,True,0,"Arial",8,-2147483633,0)
Gui.Form.lbl2.Create(Label,"Work Order date range",True,1935,255,0,270,1620,True,0,"Arial",8,-2147483633,0)
Gui.Form.dtpWOBegDate.Create(DatePicker)
Gui.Form.dtpWOBegDate.Size(1935,285)
Gui.Form.dtpWOBegDate.Position(270,1875)
Gui.Form.dtpWOEndDate.Create(DatePicker)
Gui.Form.dtpWOEndDate.Size(1935,285)
Gui.Form.dtpWOEndDate.Position(2370,1875)
Gui.Form.chkSameRange.Create(CheckBox)
Gui.Form.chkSameRange.Size(2940,360)
Gui.Form.chkSameRange.Position(270,1125)
Gui.Form.chkSameRange.Caption("With WO of the same date range")
Gui.Form.chkSameRange.Event(Click,chkSameRange_Click)
Gui.Form.lbl3.Create(Label,"Ajusted Percent",True,1530,255,0,270,2460,True,0,"Arial",8,-2147483633,0)
Gui.Form.txtAdjPercent.Create(TextBox,"",True,1230,300,0,270,2730,True,0,"Arial",8,-2147483643,1)
Gui.Form.lbl4.Create(Label,"Ex: 3.00%",True,975,255,0,1650,2820,True,0,"Arial",8,-2147483633,0)
Gui.Form2..Create
Gui.Form2..Size(15360,10695)
Gui.Form2..MinX(0)
Gui.Form2..MinY(0)
Gui.Form2..Position(0,0)
Gui.Form2..BackColor(-2147483633)
Gui.Form2..MousePointer(0)
Gui.Form2..Event(UnLoad,Form2_UnLoad)
Gui.Form2.txtParts.Create(TextBoxR)
Gui.Form2.txtParts.Size(14430,9555)
Gui.Form2.txtParts.Position(375,300)
Gui.Progress..Create
Gui.Progress..Caption("Progress")
Gui.Progress..Size(9300,1440)
Gui.Progress..MinX(0)
Gui.Progress..MinY(0)
Gui.Progress..Position(0,0)
Gui.Progress..BackColor(-2147483633)
Gui.Progress..MousePointer(0)
Gui.Progress..Event(UnLoad,Progress_UnLoad)
Gui.Progress.Bar.Create(ProgressBar)
Gui.Progress.Bar.Size(8670,255)
Gui.Progress.Bar.Position(180,315)
Gui.Progress.lblStatus.Create(Label,"Status",True,1935,255,0,180,705,True,0,"Arial",8,-2147483633,0)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
v.Global..BulkDeclareString(sBegDate, sEndDate, sWOBegDate, sWOEndDate, sPartOutOfRangeBefore, sPartOutOfRangeAfter)
v.Global..BulkDeclareLong(iBIRunID,iBILogID)
v.Global..BulkDeclareFloat(fAdjPercent)
Program.Sub.Preflight.End

Program.Sub.Main.Start
'BN May 26, 2017
'This program creates report of Sales and Actual Cost for specific date ranges. 
'Left side of report: Sales data is picked from V_ORDER_HIST_LINE where qty_shipped > 0,
'Right side of report: Cost data is picked from v_job_header where qty_completed > 0, and in v_job_operations
'Due to the slow Database, we avoid using joining multiple tables. We break down into small chunks and combine later.

'The two date ranges of Sales and Work Orders are not neccessarily the same.

'Aug 25 added: Add 2 columns between Net Cost and Avg Cost: Margin_Adj = Sales_Dollars * Adjusted_Percent; and Net_Act_Cost = Mfg_Orders_Net_Cost - Margin_Adj

'Sept 25, 2017
'For all parts with Sales in the date range - look for closed work orders for that part as follows - looking to find all closed work orders and get cumulative standard cost,  variances and pieces produced data - 
'?	Search all Active closed Work Orders with a closed date in the date range.  Include all found in the cost and pieces data. Cumulative
'?	Search all History closed Work Orders with a closed date in the date range.  Include all found in the cost and pieces data. Cumulative
'?	If no closed work orders found in Active or History files for the date range
'.	Search the History file again for the most recent closed work order and grab the associated standard cost, variance and pieces produced data
'?	If no closed work order found - leave appropriated cost, variance and pieces produced fields blank on the report.

'In the report generated:
'Parts marked as A are those that have WOs in date range only in Active WOs
'Parts marked as H are those that have WOs in date range only in History WOs
'Parts marked as AH are those that have WOs in date range in both Active WOs and History WOs
'Parts marked as O are those that have WOs not in the date range, but are the most recent in History WOs
' 
'The new report can be run at  Sales Analysis > Reports > Actual Gross Margin Changed Lookup.

F.Intrinsic.Control.SetErrorHandler("Main_Err")
F.Intrinsic.Control.ClearErrors
v.Local.sError.Declare(string)

F.ODBC.Connection!con.OpenConnection(V.Ambient.PDSN,V.Ambient.PUser,V.Ambient.PPass)
gui.Form..Show

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Main_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4528_GrossMargin.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf

Program.Sub.Main.End

Program.Sub.cmdSelect_Click.Start
F.Intrinsic.Control.SetErrorHandler("cmdSelect_Click_Err")
F.Intrinsic.Control.ClearErrors
v.Local.sError.Declare(string)
v.Local.bNumeric.Declare(boolean)

'Format date ranges
f.Intrinsic.String.Format(v.Screen.Form!dtpBegDate.Value,"YYYY-MM-DD",v.Global.sBegDate)
f.Intrinsic.String.Format(v.Screen.Form!dtpEndDate.Value,"YYYY-MM-DD",v.Global.sEndDate)
f.Intrinsic.String.Format(v.Screen.Form!dtpWOBegDate.Value,"YYYY-MM-DD",v.Global.sWOBegDate)
f.Intrinsic.String.Format(v.Screen.Form!dtpWOEndDate.Value,"YYYY-MM-DD",v.Global.sWOEndDate)
f.Intrinsic.Control.If(v.Screen.Form!chkSameRange.Value,=,1)
	v.Global.sWOBegDate.Set(v.Global.sBegDate)
	v.Global.sWOEndDate.Set(v.Global.sEndDate)
f.Intrinsic.Control.EndIf

'Validate Adjusted Percent, if numeric
f.Intrinsic.Math.IsNumeric(v.Screen.Form!txtAdjPercent.Text.Trim,v.Local.bNumeric)
f.Intrinsic.Control.If(v.Local.bNumeric,=,False)
	f.Intrinsic.UI.Msgbox("Adjusted Percent must be a numeric value","Invalid data")
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.EndIf

f.Intrinsic.Math.Div(v.Screen.Form!txtAdjPercent.Text.Trim,100,v.Global.fAdjPercent)
f.Intrinsic.Control.CallSub(pre_proc)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("cmdSelect_Click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4528_GrossMargin_AddCols.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf

Program.Sub.cmdSelect_Click.End

Program.Sub.Pre_Proc.Start
F.Intrinsic.Control.SetErrorHandler("Pre_Proc_Err")
F.Intrinsic.Control.ClearErrors
v.Local..BulkDeclareString(sError, sSQL, sHold, sMap, sPart, sFilter, sParam, sVal, sEstimated_Actual)
v.Local..BulkDeclareString(sPartFilled,sPartsOutOfRange)
v.Local..BulkDeclareLong(iCounter, iCnt, iRptID)

gui.Form..Visible(False)
Gui.Progress.Bar.Min(0)
Gui.Progress.Bar.Max(10)
Gui.Progress.Bar.Value(1)
Gui.Progress.lblStatus.Text("...collecting Gross Sales data")
gui.Progress..Show

'Delete data of the last report running 
f.ODBC.Connection!con.Execute("Delete from GCG_4528_GrossSales")
f.ODBC.Connection!con.Execute("Delete from GCG_4528_SalesByPart")
f.ODBC.Connection!con.Execute("Delete from GCG_4528_Parts")
f.ODBC.Connection!con.Execute("Delete from GCG_4528_Cost_Active")
f.ODBC.Connection!con.Execute("Delete from GCG_4528_Cost_Hist")
f.ODBC.Connection!con.Execute("Delete from GCG_4528_Cost_ByWO")
f.ODBC.Connection!con.Execute("Delete from GCG_4528_Cost")
f.ODBC.Connection!con.Execute("Delete from GCG_4528_GrossMargin")
f.ODBC.Connection!con.Execute("Delete from GCG_4528_SummaryPart")

'PART A =========================================================================GROSS_SALES SIDE===================================================================================================================
'Step 1A: 'GROSS SALES: Collect raw data from V_Order_Hist_Line and save to GCG_4528_GrossSales: Create GrossSales_DT: get Sales Dollars, Sales Unit Price, Sales Units from V_Order_Hist_Line =============
v.Local.sSQL.Set("Select Customer, Part, Location, Qty_Shipped * Price_Discount as Sales_Dollars, Qty_Shipped as Sales_Units FROM V_ORDER_HIST_LINE ")
f.Intrinsic.String.Build("{0} {1} '{2}' and '{3}' ",v.Local.sSQL," where Qty_Shipped > 0 and Date_Invoice between ",v.Global.sBegDate,v.Global.sEndDate,v.Local.sSQL)
f.Intrinsic.String.Build("{0} {1} ",v.Local.sSQL," and Part not like 'FREIGHT%' and Part != 'TOOLING' and Part != 'SCRAP' and Part != 'SCRAP-LEADED' and Part != 'SAMPLE' and Part != 'MISC' ",v.Local.sSQL)
f.Data.DataTable.CreateFromSQL("GrossSales_DT","con",v.Local.sSQL,true)
Gui.Progress.Bar.Value(2)
Gui.Progress.lblStatus.Text("...saving Gross Sales data")
Function.Data.DataTable.SaveToDB("GrossSales_DT","con","GCG_4528_GrossSales","",128,"Customer@!@Customer*!*PART@!@PART*!*Location@!@Location*!*Sales_Dollars@!@Sales_Dollars*!*Sales_Units@!@Sales_Units")
f.Data.DataTable.Close("GrossSales_DT")

'Group Customer, Part, Location, calculate Avg_Price, delete the data from GCG_4528_GrossSales then save back summary data back to GCG_4528_GrossSales
f.Data.DataTable.CreateFromSQL("GrossSales_DT","con","select Customer,Part,Location, sum(Sales_Dollars) as Sales_Dollars, sum(Sales_Units) as Sales_Units from GCG_4528_GrossSales group by Customer, Part, Location",true)
f.Intrinsic.String.Concat("Sales_Dollars * ",v.Global.fAdjPercent,v.Local.sHold)
f.Data.DataTable.AddExpressionColumn("GrossSales_DT","Margin_Adj",float,v.Local.sHold)
Gui.Progress.Bar.Value(3)
Gui.Progress.lblStatus.Text("...calculating Average Sales Price")
f.ODBC.Connection!con.Execute("Delete from GCG_4528_GrossSales")
Function.Data.DataTable.SaveToDB("GrossSales_DT","con","GCG_4528_GrossSales","",128,"Customer@!@Customer*!*PART@!@PART*!*Location@!@Location*!*Sales_Dollars@!@Sales_Dollars*!*Sales_Units@!@Sales_Units*!*Margin_Adj@!@Margin_Adj")
'Calculating Avg_Price, Update Customer and Description
f.ODBC.Connection!con.Execute("Update GCG_4528_GrossSales set Avg_Price = Sales_Dollars/Sales_Units Where Sales_Units != 0")
f.ODBC.Connection!con.Execute("Update GCG_4528_GrossSales g set Customer_Name = (Select Name_Customer from V_Customer_Master c where Rec = '1' and c.Customer = g.Customer)")
f.ODBC.Connection!con.Execute("Update GCG_4528_GrossSales g set Description = (Select Description from V_Inventory_Mstr i where i.Part = g.Part and i.Location = g.Location)")
f.Data.DataTable.Close("GrossSales_DT")

'Step 2A: 'SALES BY PART for the subreport: Group data by Part, Location, sum up the Sales_Dollars, Sales_Units and save to GCG_4528_SalesByPart==============
f.Data.DataTable.CreateFromSQL("SalesByPart_DT","con","select Part, Location, sum(Sales_Dollars) as Sales_Dollars, sum(Sales_Units) as Sales_Units from GCG_4528_GrossSales Group By Part, Location",true)
f.Intrinsic.String.Concat("Sales_Dollars * ",v.Global.fAdjPercent,v.Local.sHold)
f.Data.DataTable.AddExpressionColumn("SalesByPart_DT","Margin_Adj",float,v.Local.sHold)
Gui.Progress.Bar.Value(4)
Function.Data.DataTable.SaveToDB("SalesByPart_DT","con","GCG_4528_SalesByPart","",128,"PART@!@PART*!*Location@!@Location*!*Sales_Dollars@!@Sales_Dollars*!*Sales_Units@!@Sales_Units*!*Margin_Adj@!@Margin_Adj")
'Calculating Avg_Price, Update Description
f.ODBC.Connection!con.Execute("Update GCG_4528_SalesByPart set Avg_Price = Sales_Dollars / Sales_Units where Sales_Units != 0")
f.ODBC.Connection!con.Execute("Update GCG_4528_SalesByPart s set Description = (Select Description from V_Inventory_Mstr i where i.Part = s.Part and i.Location = s.Location)")
f.Data.DataTable.Close("SalesByPart_DT")

'PART B =======================================================================COST SIDE===================================================================================================================
'Get the distinct Parts from Sales, then look for the Job of those Parts
Gui.Progress.Bar.Value(5)
Gui.Progress.lblStatus.Text("...collecting Cost")
f.Data.DataTable.CreateFromSQL("AllParts","con","Select distinct Part,'S' as Note from GCG_4528_GrossSales")
f.Data.DataTable.SaveToDB("AllParts","con","GCG_4528_Parts","",128,"Part@!@Part*!*Note@!@Note")

'Step 1B: Cost_Active_DT: Look for Part in Active WOs ===========================================================
Gui.Progress.Bar.Value(6)
Gui.Progress.lblStatus.Text("...collecting Cost in Active WOs")
v.Local.sSQL.Set("select Job, Suffix, Job+Suffix as Job_Suffix, b.Part, Location, Qty_Completed as Units_Produced, Qty_Order as Units_Order from V_Job_Header b")
f.Intrinsic.String.Build("{0} where Qty_Completed > 0 and Date_Closed between '{1}' and '{2}' and b.Part in (Select a.Part from GCG_4528_Parts a) ",v.Local.sSQL,v.Global.sWOBegDate,v.Global.sWOEndDate,v.Local.sSQL)
f.Data.DataTable.CreateFromSQL("Cost_Active_DT","con",v.Local.sSQL,true)

f.Intrinsic.String.Build("Select Distinct b.Part from V_Job_Header b where Qty_Completed > 0 and Date_Closed between '{0}' and '{1}' and b.Part in (Select a.Part from GCG_4528_Parts a)",v.Global.sWOBegDate,v.Global.sWOEndDate,v.Local.sSQL)
f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQL,v.Local.sPartFilled)
f.Intrinsic.String.Replace(v.Local.sPartFilled,"*!*","",v.Local.sPartFilled)
f.Intrinsic.String.Replace(v.Local.sPartFilled,"#$#","','",v.Local.sPartFilled)
f.Intrinsic.String.Build("Update GCG_4528_Parts set Note = 'A' Where Part in ('{0}')",v.Local.sPartFilled,v.Local.sSQL)
f.ODBC.Connection!con.Execute(v.Local.sSQL)

'Now calculating cost of Active WOs: For every job, calculate the Std_Cost_Before (means before applying Run Quantity) and Mfg_Orders_Net_Cost for Active WO. 
Function.Data.DataTable.AddColumn("Cost_Active_DT", "Std_Cost_Before", "float", 0)
Function.Data.DataTable.AddColumn("Cost_Active_DT", "Mfg_Orders_Net_Cost", "float", 0)
f.Intrinsic.Control.For(v.Local.iCounter,0,v.DataTable.Cost_Active_DT.RowCount--,1)	
	f.Intrinsic.String.Build("select Sum(DOLLARS_ESTIMATED), Sum(DOLLARS_ACTUAL) from V_JOB_Operations where job = '{0}' and suffix = '{1}' and LMO != 'Z' Group By Job, Suffix",Variable.DataTable.Cost_Active_DT(v.Local.iCounter).Job!FieldValString,Variable.DataTable.Cost_Active_DT(v.Local.iCounter).Suffix!FieldValString,v.Local.sSQL)
	f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQL,v.Local.sEstimated_Actual)	
	f.Intrinsic.String.Split(v.Local.sEstimated_Actual,"*!*",v.Local.sEstimated_Actual)
	f.Intrinsic.Control.If(v.Local.sEstimated_Actual,<>,"")
		f.Intrinsic.Control.If(v.Local.sEstimated_Actual(0),<>,"",and,v.Local.sEstimated_Actual(1),<>,"")
			Function.Data.DataTable.SetValue("Cost_Active_DT",v.Local.iCounter,"Std_Cost_Before",v.Local.sEstimated_Actual(0))
			Function.Data.DataTable.SetValue("Cost_Active_DT",v.Local.iCounter,"Mfg_Orders_Net_Cost",v.Local.sEstimated_Actual(1))
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf	
f.Intrinsic.Control.Next(v.Local.iCounter)
Function.Data.DataTable.SaveToDB("Cost_Active_DT","con","GCG_4528_Cost_Active","",128,"job@!@job*!*suffix@!@suffix*!*job_suffix@!@job_suffix*!*Part@!@Part*!*Location@!@Location*!*Std_Cost_Before@!@Std_Cost_Before*!*Mfg_Orders_Net_Cost@!@Mfg_Orders_Net_Cost*!*Units_Produced@!@Units_Produced*!*Units_Order@!@Units_Order")
f.Data.DataTable.Close("Cost_Active_DT")

'Step 2B: WOs in the date range in History
Gui.Progress.Bar.Value(7)
Gui.Progress.lblStatus.Text("...collecting cost of History WOs in date range")
v.Local.sSQL.Set("Select Job, Suffix, Job+Suffix as Job_Suffix, b.Part, Location, Qty_Completed as Units_Produced, Qty_Order as Units_Order, 'H' as Out_Of_Range from V_Job_Hist_Mast b")
f.Intrinsic.String.Build("{0} where Qty_Completed > 0 and Date_Closed between '{1}' and '{2}' and b.Part in (Select a.Part from GCG_4528_Parts a) ", v.Local.sSQL,v.Global.sWOBegDate, v.Global.sWOEndDate,v.Local.sSQL)
f.Data.DataTable.CreateFromSQL("Cost_Hist_DT","con",v.Local.sSQL,true)

f.Intrinsic.String.Build("Select Distinct b.Part from V_job_Hist_Mast b where Qty_Completed > 0 and Date_closed Between '{0}' and '{1}' and b.Part in (Select a.Part from GCG_4528_Parts a)",v.Global.sWOBegDate,v.Global.sWOEndDate,v.Local.sSQL)
f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQL,v.Local.sPartFilled)
f.Intrinsic.String.Replace(v.Local.sPartFilled,"*!*","",v.Local.sPartFilled)
f.Intrinsic.String.Replace(v.Local.sPartFilled,"#$#","','",v.Local.sPartFilled)
f.Intrinsic.String.Build("Update GCG_4528_Parts b set b.Note = 'H' Where b.Part in ('{0}') and b.Part not in (Select a.Part from GCG_4528_Parts a where a.Note = 'A')",v.Local.sPartFilled,v.Local.sSQL)
f.ODBC.Connection!con.Execute(v.Local.sSQL)
f.Intrinsic.String.Build("Update GCG_4528_Parts b set b.Note = 'AH' Where b.Part in ('{0}') and b.Part in (Select a.Part from GCG_4528_Parts a where a.Note = 'A')",v.Local.sPartFilled,v.Local.sSQL)
f.ODBC.Connection!con.Execute(v.Local.sSQL)

'Step 3B: For the rest, get the most recent WOs from History if WOs out of date range
Gui.Progress.Bar.Value(8)
Gui.Progress.lblStatus.Text("...collecting cost of History WOs, the most recent")
f.Data.DataTable.CreateFromSQL("PartsOutOfRange","con","Select Part from GCG_4528_Parts where Note = 'S'",True)
f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.PartsOutOfRange.Rowcount--,1)
	f.Intrinsic.String.Build("Select Top 1 Job, Suffix, Job+Suffix as Job_Suffix, Part, Location, Qty_Completed as Units_Produced, Qty_Order as Units_Order from V_Job_Hist_Mast where Part = '{0}' and Qty_Completed > 0 Order by Date_Closed Desc",Variable.DataTable.PartsOutOfRange(v.Local.iCnt).Part!FieldValString,v.Local.sSQL)
	F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,<>,True)
		f.Data.DataTable.AddRow("Cost_Hist_DT","Job",v.ODBC.con!rst.FieldValTrim!Job,"Suffix",v.ODBC.con!rst.FieldValTrim!Suffix,"Job_Suffix",v.ODBC.con!rst.FieldValTrim!Job_Suffix,"Part",v.ODBC.con!rst.FieldValTrim!PART,"Location",v.ODBC.con!rst.FieldValTrim!Location,"Units_Produced",v.ODBC.con!rst.FieldValTrim!Units_Produced,"Units_Order",v.ODBC.con!rst.FieldValTrim!Units_Order,"Out_Of_Range","O")
		f.Intrinsic.String.Concat(v.Local.sPartsOutOfRange,"','",v.ODBC.con!rst.FieldValTrim!PART,v.Local.sPartsOutOfRange)
	f.Intrinsic.Control.EndIf
	f.ODBC.con!rst.Close
f.Intrinsic.Control.Next(v.Local.iCnt)

f.Intrinsic.String.Build("Update GCG_4528_Parts set Note = 'O' where Part in ('{0}')",v.Local.sPartsOutOfRange,v.Local.sSQL)
f.ODBC.Connection!con.Execute(v.Local.sSQL)

'Step 4B: Calculate the Std_Cost_Before and Mfg_Orders_Net_Cost of History WO: For every job, calculate the Std_Cost_Before (means before applying Run Quantity) and Mfg_Orders_Net_Cost for History WO.  =====================================================
Function.Data.DataTable.AddColumn("Cost_Hist_DT", "Std_Cost_Before", "float", 0)
Function.Data.DataTable.AddColumn("Cost_Hist_DT", "Mfg_Orders_Net_Cost", "float", 0)
f.Intrinsic.Control.For(v.Local.iCounter,0,v.DataTable.Cost_Hist_Dt.RowCount--,1)	
	F.Intrinsic.String.Build("Select sum(DOLLARS_ESTIMATED), sum(DOLLARS_ACTUAL) from V_JOB_Hist_Ops where job = '{0}' and suffix = '{1}' and LMO != 'Z' Group By Job, Suffix",Variable.DataTable.Cost_Hist_Dt(v.Local.iCounter).Job!FieldValString,Variable.DataTable.Cost_Hist_Dt(v.Local.iCounter).Suffix!FieldValString,v.Local.sSQL)
	f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQL, v.Local.sEstimated_Actual)	
	f.Intrinsic.String.Split(v.Local.sEstimated_Actual,"*!*",v.Local.sEstimated_Actual)
	f.Intrinsic.Control.If(v.Local.sEstimated_Actual,<>,"")
		f.Intrinsic.Control.If(v.Local.sEstimated_Actual(0),<>,"",and,v.Local.sEstimated_Actual(1),<>,"")
			Function.Data.DataTable.SetValue("Cost_Hist_Dt",v.Local.iCounter,"Std_Cost_Before",v.Local.sEstimated_Actual(0))
			Function.Data.DataTable.SetValue("Cost_Hist_Dt",v.Local.iCounter,"Mfg_Orders_Net_Cost",v.Local.sEstimated_Actual(1))
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf	
f.Intrinsic.Control.Next(v.Local.iCounter)

Function.Data.DataTable.SaveToDB("Cost_Hist_DT","con","GCG_4528_Cost_Hist","",128,"job@!@job*!*suffix@!@suffix*!*job_suffix@!@job_suffix*!*Part@!@Part*!*Location@!@Location*!*Std_Cost_Before@!@Std_Cost_Before*!*Mfg_Orders_Net_Cost@!@Mfg_Orders_Net_Cost*!*Units_Produced@!@Units_Produced*!*Units_Order@!@Units_Order*!*Out_Of_Range@!@Out_Of_Range")
f.Data.DataTable.Close("Cost_Hist_DT")

f.ODBC.Connection!con.Execute("Update GCG_4528_Cost_Hist b set b.Out_Of_Range = 'AH' Where b.Part in (Select a.Part from GCG_4528_Parts a where a.Note = 'AH')")

'Step 5B: Combine Cost_Active + Cost_Hist
f.Data.DataTable.CreateFromSQL("Cost_DT_ByWO","con","Select Job, Suffix, Job_Suffix, Part, Location, Units_Produced, Units_Order, Std_Cost_Before, Mfg_Orders_Net_Cost, 'A' as Range from GCG_4528_Cost_Active UNION Select Job, Suffix, Job_Suffix, Part, Location, Units_Produced, Units_Order, Std_Cost_Before, Mfg_Orders_Net_Cost, Out_Of_Range as Range from GCG_4528_Cost_Hist",true)

'Mfg_Orders_Std_Cost => this is the cost of RUN Qty: weight of Units_Produced/Units_Order. Then calculate Variances
Function.Data.DataTable.AddExpressionColumn("Cost_DT_ByWO", "Mfg_Orders_Std_Cost", "float", "IIF(Units_Order <> 0, (Std_Cost_Before * Units_Produced)/Units_Order, Std_Cost_Before)")
Function.Data.DataTable.AddExpressionColumn("Cost_DT_ByWO", "Mfg_Orders_Variances", "float", "Mfg_Orders_Net_Cost - Mfg_Orders_Std_Cost")
Gui.Progress.Bar.Value(8)
Gui.Progress.lblStatus.Text("...calculating cost fields")
'Save to GCG_4528_Cost_ByWO for PCC data test double check if we want later, because the report does not drill down the WOs, we can view those WOs in this database table
Function.Data.DataTable.SaveToDB("Cost_DT_ByWO","con","GCG_4528_Cost_ByWO","",128,"job@!@job*!*Suffix@!@Suffix*!*Job_Suffix@!@Job_Suffix*!*Part@!@Part*!*Location@!@Location*!*Mfg_Orders_Std_Cost@!@Mfg_Orders_Std_Cost*!*Std_Cost_Before@!@Std_Cost_Before*!*Mfg_Orders_Variances@!@Mfg_Orders_Variances*!*Mfg_Orders_Net_Cost@!@Mfg_Orders_Net_Cost*!*Units_Produced@!@Units_Produced*!*Units_Order@!@Units_Order*!*Range@!@Range")
f.Data.DataTable.Close("Cost_DT_ByWO")

'Step 6B: Sum Cost by Part, Location
f.Data.DataTable.CreateFromSQL("Cost_DT","con","select Part, Location, sum(Mfg_Orders_Std_Cost) as Mfg_Orders_Std_Cost, sum(Mfg_Orders_Variances) as Mfg_Orders_Variances, sum(Mfg_Orders_Net_Cost) as Mfg_Orders_Net_Cost, sum(Units_Produced) as Units_Produced from GCG_4528_Cost_ByWO Group By Part, Location",true)
Gui.Progress.Bar.Value(9)
Gui.Progress.lblStatus.Text("...calculating summary fields")
Function.Data.DataTable.SaveToDB("Cost_DT","con","GCG_4528_Cost","",128,"Part@!@Part*!*Location@!@Location*!*Mfg_Orders_Std_Cost@!@Mfg_Orders_Std_Cost*!*Mfg_Orders_Variances@!@Mfg_Orders_Variances*!*Mfg_Orders_Net_Cost@!@Mfg_Orders_Net_Cost*!*Units_Produced@!@Units_Produced")
'Calculate Ajusted Margin amount and Net Cost amount by Part
f.ODBC.Connection!con.Execute("Update GCG_4528_Cost c set Margin_Adj_ByPart = (select Margin_Adj from GCG_4528_SalesByPart s where c.Part = s.Part and c.Location = s.Location)")
f.ODBC.Connection!con.Execute("Update GCG_4528_Cost set Net_Act_Cost_ByPart = Mfg_Orders_Net_Cost - Margin_Adj_ByPart ")
f.Data.DataTable.Close("Cost_DT")

'Part C =============================================================================COMBINE GROSS_SALES AND COST Group by Customer left join Part Cost===================================================================================================================
v.Local.sSQL.Set("Select s.Customer, s.Customer_Name, s.Part,s.Location, Description, Sales_Dollars, Sales_Units, Avg_Price, Mfg_Orders_Std_Cost, Mfg_Orders_Variances, Mfg_Orders_Net_Cost, CASE WHEN c.Part <> '' THEN s.Margin_Adj END AS Margin_Adj, Units_Produced")
f.Intrinsic.String.Build(" {0} {1}",v.Local.sSQL," from GCG_4528_GrossSales s Left Join GCG_4528_Cost c on s.part = c.part and s.location = c.location",v.Local.sSQL)
f.Data.DataTable.CreateFromSQL("Final_DT","con",v.Local.sSQL,true)
f.Data.DataTable.AddExpressionColumn("Final_DT","Net_Act_Cost",float,"Mfg_Orders_Net_Cost - Margin_Adj")
f.Data.DataTable.AddExpressionColumn("Final_DT","Avg_Cost",float,"IIF(Units_Produced <> 0,Net_Act_Cost/Units_Produced,Units_Produced)")

'Log Report
F.Global.BI.GetRunID(V.Global.iBIRunID)
f.Global.BI.GetIDFromName("GCG_4528_ActualGrossMargin_AdCols.rpt",True,v.Local.iRptID)
F.Global.BI.StartLogging(V.Global.iBIRunID,v.Local.iRptID,-1,"",V.Global.iBILogID)
Function.Data.DataTable.AddColumn("Final_DT", "BIRUNID", "long", Variable.Global.iBIRunID)

'Stop Logging
F.Global.BI.StopLogging(V.Global.iBILogID)
f.Intrinsic.Math.Mult(v.Global.fAdjPercent,100,v.Global.fAdjPercent)
f.Intrinsic.String.Format(v.Global.fAdjPercent,"0.00",v.Local.sVal)
V.Local.sParam.Set("Adj_Percent")
Gui.Progress.lblStatus.Text("...sending to report")
Gui.Progress.Bar.Value(10)
Function.Data.DataTable.SaveToDB("Final_DT", "con", "GCG_4528_GrossMargin","",128,"BIRUNID@!@BIRUNID*!*Customer@!@Customer*!*Customer_Name@!@Customer_Name*!*Part@!@Part*!*Location@!@Location*!*DESCRIPTION@!@DESCRIPTION*!*Sales_Dollars@!@Sales_Dollars*!*Sales_Units@!@Sales_Units*!*Avg_Price@!@Avg_Price*!*Mfg_Orders_Std_Cost@!@Mfg_Orders_Std_Cost*!*Mfg_Orders_Variances@!@Mfg_Orders_Variances*!*Mfg_Orders_Net_Cost@!@Mfg_Orders_Net_Cost*!*Units_Produced@!@Units_Produced*!*Avg_Cost@!@Avg_Cost*!*Margin_Adj@!@Margin_Adj*!*Net_Act_Cost@!@Net_Act_Cost")
f.Data.DataTable.Close("Final_DT")

'Process the Parts that do not have WO
F.Intrinsic.String.Build("Update GCG_4528_GrossMargin set  InvBegDate = '{0}', InvEndDate = '{1}', WOBegDate = '{2}', WOEndDate = '{3}'",V.Global.sBegDate,V.Global.sEndDate,V.Global.sWOBegDate,V.Global.sWOEndDate,V.Local.sSQL)
f.ODBC.Connection!con.Execute(V.Local.sSQL)
f.ODBC.Connection!con.Execute("Update GCG_4528_GrossMargin set Avg_Margin = (Avg_Price - Avg_Cost)")
f.ODBC.Connection!con.Execute("Update GCG_4528_GrossMargin set Margin_Percent = ((Avg_Price - Avg_Cost) /Avg_Price)*100 where Avg_Price != 0 and Avg_Cost is not null and Avg_Price is not null")

f.Intrinsic.String.Build("Update GCG_4528_GrossMargin set Out_Of_Range = 'O' where part in ('{0}')",v.Local.sPartsOutOfRange,v.Local.sSQL)
f.ODBC.Connection!con.Execute(V.Local.sSQL)
f.ODBC.Connection!con.Execute("Update GCG_4528_GrossMargin b set b.Out_Of_Range = 'H' where b.part in (Select a.Part from GCG_4528_Parts a where a.Note = 'H')")
f.ODBC.Connection!con.Execute("Update GCG_4528_GrossMargin b set b.Out_Of_Range = 'A' where b.part in (Select a.Part from GCG_4528_Parts a where a.Note = 'A')")
f.ODBC.Connection!con.Execute("Update GCG_4528_GrossMargin b set b.Out_Of_Range = 'AH' where b.part in (Select a.Part from GCG_4528_Parts a where a.Note = 'AH')")

'Part D =============================================================================COMBINE GCG_4528_SalesByPart AND GCG_4528_Cost, Group by Part ===================================================================================================================
f.Data.DataTable.CreateFromSQL("Final_DT","con","Select s.Part,s.Location, Description, Sales_Dollars, Sales_Units, Avg_Price, Mfg_Orders_Std_Cost, Mfg_Orders_Variances, Mfg_Orders_Net_Cost, c.Margin_Adj_ByPart, c.Net_Act_Cost_ByPart,Units_Produced, Avg_Cost from GCG_4528_SalesByPart s left join GCG_4528_Cost c on s.part = c.part and s.location = c.location",true)
Gui.Progress.Bar.Value(10)
Gui.Progress.lblStatus.Text("...printing report")
'Save to DB
Function.Data.DataTable.SaveToDB("Final_DT","con","GCG_4528_SummaryPart","",128,"Part@!@Part*!*Location@!@Location*!*DESCRIPTION@!@DESCRIPTION*!*Sales_Dollars@!@Sales_Dollars*!*Sales_Units@!@Sales_Units*!*Avg_Price@!@Avg_Price*!*Mfg_Orders_Std_Cost@!@Mfg_Orders_Std_Cost*!*Mfg_Orders_Variances@!@Mfg_Orders_Variances*!*Mfg_Orders_Net_Cost@!@Mfg_Orders_Net_Cost*!*Units_Produced@!@Units_Produced*!*Avg_Cost@!@Avg_Cost*!*Margin_Adj_ByPart@!@Margin_Adj_ByPart*!*Net_Act_Cost_ByPart@!@Net_Act_Cost_ByPart")
f.Data.DataTable.Close("Final_DT")

f.ODBC.Connection!con.Execute("Update GCG_4528_SummaryPart set Avg_Cost = Net_Act_Cost_ByPart / Units_Produced  where Units_Produced != 0 and Units_Produced is not null ")
f.ODBC.Connection!con.Execute("Update GCG_4528_SummaryPart set Avg_Margin = Avg_Price - Avg_Cost  where Avg_Price is not null and Avg_Cost is not null ")
f.ODBC.Connection!con.Execute("Update GCG_4528_SummaryPart set Margin_Percent = (Avg_Price - Avg_Cost) / Avg_Price  where Avg_Price != 0 and Avg_Price is not null and Avg_Cost is not null ")
f.Intrinsic.String.Build("Update GCG_4528_SummaryPart set Out_Of_Range = 'O' where part in ('{0}')",v.Local.sPartsOutOfRange,v.Local.sSQL)
f.ODBC.Connection!con.Execute(v.Local.sSQL)
f.ODBC.Connection!con.Execute("Update GCG_4528_SummaryPart b set b.Out_Of_Range = 'H' where b.part in (Select a.Part from GCG_4528_Parts a where a.Note = 'H')")
f.ODBC.Connection!con.Execute("Update GCG_4528_SummaryPart b set b.Out_Of_Range = 'A' where b.part in (Select a.Part from GCG_4528_Parts a where a.Note = 'A')")
f.ODBC.Connection!con.Execute("Update GCG_4528_SummaryPart b set b.Out_Of_Range = 'AH' where b.part in (Select a.Part from GCG_4528_Parts a where a.Note = 'AH')")

gui.Progress..Visible(False)
'Print the Report
F.Global.BI.RunReportPreProcessor(V.Global.iBIRunID,V.Global.iBILogID,V.Local.sParam,V.Local.sVal,"",-1,True,"",-1,"",-1,"","",V.Global.iBIRunID)
Function.ODBC.Connection!con.Close
f.Intrinsic.Control.End

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Pre_Proc_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4528_GrossMargin.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf

Program.Sub.Pre_Proc.End

Program.Sub.Form_UnLoad.Start
f.ODBC.Connection!con.Close
f.Intrinsic.Control.End

Program.Sub.Form_UnLoad.End

Program.Sub.chkSameRange_Click.Start
f.Intrinsic.Control.If(v.Screen.Form!chkSameRange.Value,=,1)
	gui.Form.dtpWOBegDate.Enabled(False)
	gui.Form.dtpWOEndDate.Enabled(False)
f.Intrinsic.Control.Else
	gui.Form.dtpWOBegDate.Enabled(True)
	gui.Form.dtpWOEndDate.Enabled(True)
f.Intrinsic.Control.Endif
Program.Sub.chkSameRange_Click.End

Program.Sub.Form2_UnLoad.Start
f.ODBC.Connection!con.Close
f.Intrinsic.Control.End

Program.Sub.Form2_UnLoad.End

Program.Sub.Progress_UnLoad.Start
f.ODBC.Connection!con.Close
F.Intrinsic.Control.End

Program.Sub.Progress_UnLoad.End

Program.Sub.Comments.Start
${$0$}$$}$$}$2/7/2017 1:36:21 PM$}$False
${$3$}$0$}$$}$-1$}$-1$}$$}$1/1/1900$}$This project was created for Kosmo Machine, Inc. on June of 2016.


This is a custom GAB script that will display custom work order detail information. The information will be identical to the data from the work order detail grid in the standard GSS system however the user will not have the ability to browse via the ?Amount? column.
The purpose of this is the customer has quoters/planners that would like to see this specific information and cannot do so with the Work Order (No Dollars) or WO Detail standard report.
This GAB script is to run from the Work Order header screen. The script will check to see if the user is a part of the WODET security group. If they are not the ?Details? button will be disabled and the ?Script 1? button will be activated with the custom GAB script.
Customer will need to set up the WODET security group prior to installation. Customer is responsible for setting up security for the standard work order screens if certain users are not to access it.

**Note: Given the information on the custom grid, just as with the standard WO detail screen, given certain parameters pay for Labor may be calculated by users.
Program.Sub.Comments.End